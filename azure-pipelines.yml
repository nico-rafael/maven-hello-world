# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- master

pool:
  name: MyAgentsPool

variables:
  brpatch: $[counter(variables['build.sourcebranchname'], 0)]
  jarVersion: 1.0.$(brpatch)

steps:
- task: Maven@1
  inputs:
    mavenPomFile: 'myapp/pom.xml'
    mavenOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: 'default'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    goals: 'clean package'
    options: 'clean package -DjarVersion=$(jarVersion)'

- task: CmdLine@2
  inputs:
    script: 'java -jar myapp/target/myapp-1.0.$(brpatch).jar'

- task: CopyFiles@2
  inputs:
    Contents: 'myapp/target/myapp*.jar'
    TargetFolder: '$(build.artifactstagingdirectory)'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'Build Artifacts'

# Build Dcker
- task: Docker@2
  inputs:
    containerRegistry: 'Docker Hub'
    repository: 'nicorafael/helloworld'
    command: 'build'
    Dockerfile: 'helloworld.dockerfile'
    tags: '$(jarVersion)'
    arguments: '--build-arg jarVersion=$(jarVersion)'

# Push docker to docekr hub
- task: Docker@2
  inputs:
    containerRegistry: 'Docker Hub'
    repository: 'nicorafael/helloworld'
    command: 'push'
    tags: '$(jarVersion)'


# Clean docker images and conteinders 
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      #!/bin/bash -x
      
      docker container stop $(docker ps -a | grep -v "azp-agent" | awk 'NR>1 {print $1}')
      docker rm $(docker ps -a | grep -v "azp-agent" | awk 'NR>1 {print $1}')
      docker rmi $(docker images -a -q)

